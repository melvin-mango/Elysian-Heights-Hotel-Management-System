<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://unpkg.com/@tailwindcss/browser@4"></script>
    <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
    <title>Assign Rooms</title>
    <style>
      
    </style>
</head>
<body>

    <div x-data="{ open: false }" @click.away="open = false" class="relative w-full h-screen">
    <nav class="flex item-center h-16 w-screen justify-between p-5 md:px-10 lg:px-20 xl:px-40 2xl:px-60" style="background-color: #604020;">
        <div class="flex items-start justify-between space-x-10">
 <button @click="open = true" class="text-white ">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-6">
  <path fill-rule="evenodd" d="M3 6.75A.75.75 0 0 1 3.75 6h16.5a.75.75 0 0 1 0 1.5H3.75A.75.75 0 0 1 3 6.75ZM3 12a.75.75 0 0 1 .75-.75h16.5a.75.75 0 0 1 0 1.5H3.75A.75.75 0 0 1 3 12Zm0 5.25a.75.75 0 0 1 .75-.75h16.5a.75.75 0 0 1 0 1.5H3.75a.75.75 0 0 1-.75-.75Z" clip-rule="evenodd" />
</svg>
        </button>
        <p class="text-white font-bold">Receptionist</p>
        </div>
       

        <div class="flex item-center justtify-between space-x-4">
        <a href="#" onclick="openChat()">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-6 text-white">
  <path fill-rule="evenodd" d="M4.804 21.644A6.707 6.707 0 0 0 6 21.75a6.721 6.721 0 0 0 3.583-1.029c.774.182 1.584.279 2.417.279 5.322 0 9.75-3.97 9.75-9 0-5.03-4.428-9-9.75-9s-9.75 3.97-9.75 9c0 2.409 1.025 4.587 2.674 6.192.232.226.277.428.254.543a3.73 3.73 0 0 1-.814 1.686.75.75 0 0 0 .44 1.223ZM8.25 10.875a1.125 1.125 0 1 0 0 2.25 1.125 1.125 0 0 0 0-2.25ZM10.875 12a1.125 1.125 0 1 1 2.25 0 1.125 1.125 0 0 1-2.25 0Zm4.875-1.125a1.125 1.125 0 1 0 0 2.25 1.125 1.125 0 0 0 0-2.25Z" clip-rule="evenodd" />
</svg>

        </a>

        <a href="">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-6 text-white">
  <path d="M5.85 3.5a.75.75 0 0 0-1.117-1 9.719 9.719 0 0 0-2.348 4.876.75.75 0 0 0 1.479.248A8.219 8.219 0 0 1 5.85 3.5ZM19.267 2.5a.75.75 0 1 0-1.118 1 8.22 8.22 0 0 1 1.987 4.124.75.75 0 0 0 1.48-.248A9.72 9.72 0 0 0 19.266 2.5Z" />
  <path fill-rule="evenodd" d="M12 2.25A6.75 6.75 0 0 0 5.25 9v.75a8.217 8.217 0 0 1-2.119 5.52.75.75 0 0 0 .298 1.206c1.544.57 3.16.99 4.831 1.243a3.75 3.75 0 1 0 7.48 0 24.583 24.583 0 0 0 4.83-1.244.75.75 0 0 0 .298-1.205 8.217 8.217 0 0 1-2.118-5.52V9A6.75 6.75 0 0 0 12 2.25ZM9.75 18c0-.034 0-.067.002-.1a25.05 25.05 0 0 0 4.496 0l.002.1a2.25 2.25 0 1 1-4.5 0Z" clip-rule="evenodd" />
</svg>
        </a>
</div>
    </nav>


<!-- Chat Modal -->
<div id="chatModal" class="hidden fixed inset-0 bg-[#6040204d] bg-opacity-90 flex justify-center items-center">
    <div class="bg-white rounded-lg shadow-lg w-96">
        <!-- Chat Header -->
        <div class="flex justify-between items-center px-4 py-2 border-b bg-[#604020] text-white">
            <h2 class="text-lg font-semibold">Group Chat</h2>
            <button onclick="closeChat()" class="text-white text-2xl">&times;</button>
        </div>

        <!-- Chat Messages -->
        <div id="chatBox" class="p-4 h-64 overflow-y-auto space-y-2 bg-gray-100">
            <!-- Messages will be added here dynamically -->
        </div>

        <!-- Chat Input -->
        <div class="flex items-center p-4 border-t">
            <input type="text" id="messageInput" placeholder="Type a message..."
                class="flex-1 p-2 border rounded-md focus:outline-none focus:ring focus:ring-gray-400">
            <button onclick="sendMessage()"
                class="ml-2 bg-[#604020] text-white px-4 py-2 rounded-md hover:bg-opacity-90">
                Send
            </button>
        </div>
    </div>
</div>

<script>
    // Assume the receptionist is already logged in (for now, we'll use a hardcoded username

    function openChat() {
        document.getElementById('chatModal').classList.remove('hidden');
    }

    function closeChat() {
        document.getElementById('chatModal').classList.add('hidden');
    }


    let loggedInUsername = "";

// Fetch logged-in user's name
function getCurrentUser() {
    fetch('/current-user')
        .then(response => response.json())
        .then(data => {
            if (data.username) {
                loggedInUsername = data.username;
            } else {
                alert("Session expired. Please log in again.");
                window.location.href = "/login";
            }
        })
        .catch(error => console.error("Error fetching user:", error));
}

// Load chat messages
function loadMessages() {
    fetch("/messages")
        .then(response => response.json())
        .then(messages => {
            const chatBox = document.getElementById("chatBox");
            chatBox.innerHTML = "";
            messages.forEach(msg => displayMessage(msg.username, msg.message));
        })
        .catch(error => console.error("Error loading messages:", error));
}

 function displayMessage(username, message) {
    const chatBox = document.getElementById("chatBox");

    const messageDiv = document.createElement("div");
    messageDiv.classList.add("flex", "mb-2", "items-end");

    // Different styling for sent and received messages
    if (username === loggedInUsername) {
        messageDiv.classList.add("justify-end");
    }

    // Avatar
    const avatar = document.createElement("div");
    avatar.classList.add("w-8", "h-8", "rounded-full", "bg-gray-300", "flex", "items-center", "justify-center", "text-sm", "font-bold", "mr-2");
    avatar.textContent = username[0].toUpperCase(); // First letter as avatar

    const messageContainer = document.createElement("div");
    messageContainer.classList.add("max-w-xs", "px-4", "py-2", "bg-[#604020]","rounded-lg", "shadow-md", "relative");

    if (username === loggedInUsername) {
        messageContainer.classList.add("#604020", "text-white", "rounded-br-none");
    } else {
        messageContainer.classList.add("bg-white", "text-gray-800", "rounded-bl-none");
    }

    const usernameHeader = document.createElement("div");
    usernameHeader.classList.add("text-xs", "font-semibold", "text-White", "mb-1");
    usernameHeader.textContent = username;

    const messageContent = document.createElement("p");
    messageContent.textContent = message;

    const timestamp = document.createElement("span");
    timestamp.classList.add("text-xs", "absolute", "bottom-0", "right-2", "white","mt-2");
    timestamp.textContent = new Date().toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" });

    messageContainer.appendChild(usernameHeader);
    messageContainer.appendChild(messageContent);
    messageContainer.appendChild(timestamp);

    if (username !== loggedInUsername) {
        messageDiv.appendChild(avatar); // Show avatar only for received messages
    }
    messageDiv.appendChild(messageContainer);

    chatBox.appendChild(messageDiv);
    chatBox.scrollTop = chatBox.scrollHeight; // Auto-scroll to the latest message
}

// Send message
function sendMessage() {
    const messageInput = document.getElementById("messageInput");
    const messageText = messageInput.value.trim();

    if (messageText !== "" && loggedInUsername !== "") {
        fetch("/messages", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ message: messageText })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                displayMessage(loggedInUsername, messageText);
                messageInput.value = "";
            }
        })
        .catch(error => console.error("Error sending message:", error));
    } else {
        alert("You must be logged in to send messages.");
    }
}

// Initialize chat
document.addEventListener("DOMContentLoaded", () => {
    getCurrentUser();
    loadMessages();
});


 
</script>
     <!-- Sidebar -->
        <div 
            class="fixed top-0 left-0 w-50 sm:w-64 h-full bg-white shadow-lg transform -translate-x-full transition-transform duration-300 ease-in-out"
            :class="open ? 'translate-x-0' : '-translate-x-full'" style="background-color: #604020 ;"
        >
            <div class="p-4 flex justify-between items-start h-40" >
                <div class="flex items-center justify-center h-26">
                    <img src="/img/logo2.png" alt="" class="w-30">
                </div>
                
                <button @click="open = false" class="text-white text-4xl font-semibold">&times;</button>
            </div>
            <div class="px-4">            
            <nav class="py-12 space-y-2 rounded-sm " style="background-color: #ac73395e;">
                <a href="/receptionist/dashboard" class="block px-4 py-2 text-white text-xl ">Home</a>
                <a href="/receptionist/booking" class="block px-4 py-2 text-white text-xl ">Book</a>
                <a href="/receptionist/checkin" class="block px-4 py-2 text-white text-xl ">Check-In</a>
                <a href="/receptionist/checkout" class="block px-4 py-2 text-white text-xl ">Check-Out</a>
                <a href="/receptionist/assignrooms" class="block px-4 py-2 text-white text-xl " style="background-color: #cc99664a; box-shadow: rgba(50, 50, 93, 0.25) 0px 13px 27px -5px, rgba(0, 0, 0, 0.3) 0px 8px 16px -8px;">Assign Rooms</a>
                <a href="/receptionist/roomstatus" class="block px-4 py-2 text-white text-xl ">Room Status</a>
                <a href="/receptionist/rooms" class="block px-4 py-2 text-white text-xl ">Rooms</a>
                <a href="/receptionist/specialrequest" class="block px-4 py-2 text-white text-xl ">Special Request</a>
                <a href="/logout" class="block px-4 py-2 text-white text-l font-semibold  mt-4">Log Out</a>
            </nav>
            </div>

        </div>


<div class="space-y-6 px-2 md:px-10 lg:px-20 xl:px-40 2xl:px-60">
    
<p class="text-2xl font-bold italic mt-2 ml-2" style="color: #231302; box-shadow:">Check-Out Page</p>
 

    <div>
        <p class="text-center my-6 text-2xl">Assign Rooms to guest</p>
        
<table class="w-full border-collapse border border-gray-300 shadow-lg rounded-lg overflow-hidden">
    <thead class="text-white" style="background-color: #604020;">
        <tr>
            <th class="p-3 text-left">Guest Name</th>
            <th class="p-3 text-left">Room No.</th>
            <th class="p-3 text-left">Action</th>
        </tr>
    </thead>
    <tbody class="bg-white divide-y divide-gray-200">
    {{#each checkedInGuests}}
    <tr class="hover:bg-gray-100 transition">
        <td class="p-3 border">{{this.guestName}}</td>
        <td class="p-3 border">
            <select class="w-full p-2 border rounded room-select" data-email="{{this.email}}">
                <option value="" disabled selected>Select Room</option>
                {{#each ../availableRooms}}
                <option value="{{this}}">{{this}}</option>
                {{/each}}
            </select>
        </td>
        <td class="p-3 border text-center">
            <button class="assign-btn bg-green-600 text-white px-3 py-1 rounded hover:bg-green-700 transition" data-email="{{this.email}}">
                Assign
            </button>
        </td>
    </tr>
    {{/each}}
</tbody>

</table>

<script>
document.addEventListener("DOMContentLoaded", function () {
    document.querySelectorAll(".assign-btn").forEach(button => {
        button.addEventListener("click", function () {
            const email = this.dataset.email ? this.dataset.email.trim() : null;
            const selectElement = document.querySelector(`.room-select[data-email='${this.dataset.email}']`);
            const roomNumber = selectElement ? selectElement.value.trim() : null;

            console.log("Collected Data:", { email, roomNumber }); // Debugging log

            if (!email || !roomNumber) {
                alert("Invalid request. Please select a guest and a room.");
                return;
            }

            fetch("/receptionist/assignrooms", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ email, roomNumber }) // Send data as JSON
            })
            .then(response => response.json())
            .then(data => {
                console.log("Server Response:", data); // Debugging log
                if (data.success) {
                    alert("Room assigned successfully!");
                    location.reload();
                } else {
                    alert("Error: " + data.error);
                }
            })
            .catch(error => console.error("Error:", error));
        });
    });
});



</script>

    </div>
    

       

    </div>


</div>
</body>
</html>